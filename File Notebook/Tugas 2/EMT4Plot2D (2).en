% * Tugas Menggambar Grafik 2D
% 
% Mukhammad Rafi' Ar Rasyid
%% 22301244037
%% Pendidikan Matematika Kelas A
% 
% * Menggambar Grafik 2D dengan EMT
% 
% Notebook ini menjelaskan tentang cara menggambar berbagaikurva dan
% grafik 2D dengan software EMT. EMT menyediakan fungsi plot2d() untuk
% menggambar berbagai kurva dan grafik dua dimensi (2D).
%% ** Basic Plots
% 
% Terdapat banyak fungsi dasar dari plot. Ada, koordinat layar, yang
% mana selalu berada diantara 0 hingga 1024 pada setiap axis, tidak
% diperhartikan layarnya persegi atau tidak. Dan ada juga koordinat
% plot, yang dapat digunakan dengan menggunakan setplot(). Proses
% pembuatan map diantara koordinat tergantung dari jenis layar plotnya.
% Catatan, perintah pabrik shrinkwindow() meninggalkan tempat untuk
% label axis dan judul plot.
% 
% Dalam contoh dibawa, kita dapat menggambar sebuah garis sembarang
% dalam beberapa warna yang berbeda. Untuk detailnya ada pada fungsi,
% pembelajaran fungsi utama dari EMT.
>clg; // clear screen
>window(0,0,1024,1024); // use all of the window
>setplot(0,1,0,1); // set plot coordinates
>hold on; // start overwrite mode
>n=100; X=random(n,2); Y=random(n,2);  // get random points
>colors=rgb(random(n),random(n),random(n)); // get random colors
>loop 1 to n; color(colors[#]); plot(X[#],Y[#]); end; // plot
>hold off; // end overwrite mode
>insimg; // insert to notebook
 %image% EMT4Plot2D (2)-001.png
>reset;
% Penting untuk menunggu grafiknya, sejak perintah plot() akan menghapus
% layar plot. 
% 
% Untuk menghilangkan semua yang sudah dibuat, kita gunakan printah
% reset().
% 
% Untuk menampilkan gambar hasil plot di layar notebook, perintah
% plot2d() dapat diakhiri dengan titik dua (:). Cara lain adalah
% perintah plot2d() diakhiri dengan titik koma (;), kemudian menggunakan
% perintah insimg() untuk menampilkan gambar hasil plot.
% 
% Untuk contoh lainnya, kita akan menggambar plot sebagai inset di plot
% lainnya. Ini akan selesaimendefinisikan sebuah layar plot yang lebih
% kecil. Sebagai catatan bahwa layar ini tidak akan menyediaklan ruangan
% untuk axis label diluar dari layar plot. Kita dapat menambahkan bebera
% margin atau batas untuk ini jika diinginkan. Catatan juga bahwa untuk
% menyimpan dan mengembalikan ke layar penuh, dan menunggu beberapa plot
% sembari kita menbuat plot inset.
>plot2d("x^3-x");
>xw=200; yw=100; ww=300; hw=300;
>ow=window();
>window(xw,yw,xw+ww,yw+hw);
>hold on;
>barclear(xw-50,yw-10,ww+60,ww+60);
>plot2d("x^4-x",grid=6):
 %image% EMT4Plot2D (2)-002.png
>hold off;
>window(ow);
% Sebuah plot dengan beberapa fitur yang dapat diaktifkan dari beberaoa
% cara. Ada beberapa fitur fungsi figure() untuk ini.
% 
% ** Plot Aspect
% 
% Setelan pabrik dari plot digunakan pada layar plot segiempat. Anda
% dapat mengubah tampilan ini dengan menggunakan fungsi aspect(). Jangan
% lupa untuk reset aspeknya. Anda dapat juga mengubah setelan menu ini
% pada "Set Aspect" untuk sebuah spesifik aspek ratio atau dengan
% beberapa ukuran layar grafik. 
% 
% Namun Anda dapat juga mengubah hanay satu plot saja. untuk ini,
% beberapa ukuran pada area plot juga berubah, dan juga layar adalah set
% sehingga labelnya mendapatkan ruang yang cukup, 
>aspect(2); // rasio panjang dan lebar 2:1
>plot2d(["sin(x)","cos(x)"],0,2pi):
 %image% EMT4Plot2D (2)-003.png
>aspect();
>reset;
% Fungsi reset() dapat mengatur ulang default plot termasuk mengubah
% ulangrasio aspek.
% 
% * 2D Plots in Euler
% 
% Euler Math Toolbox memiliki plot dalam 2D, kedua data dan fungsi. EMT
% dapat membuat fungsi plot2d. Fungsi ini dapat membuat plot fungsi dan
% data.
% 
% Ini memungkinkan untuk membuat plot dalam Maxima menggunakan Gnuplot
% atau Python menggunakan Math Plot Lib.
% 
% Euler dapat membuat plot 2D plots dari
% 
% - Ekspresi
%% - FUngsi, variabel, atau kurva parameter,
%% - Vektor dari value x-y,
%% - Menagndai titik dalam sebuat bidang datar,
%% - membuat kurva implisit dengan berbagai level atau tingkatan daerah,
%% - Fungsi kompleks.
% 
% gaya plot termasuk banyak gaya, dari garis dan titik, plot batang dan
% plot arsir.
% 
% * Plot Ekspresi atau Variabel
% 
% Satu persamaan dalam "x" (misal "4*x^2") atau pada nama dari fungsi
% (misal "f") menghasilka n grafik fungsi.
% 
% Sekarang merupakan beberapa fungsi dasar, yang mana digunakan pada
% jarak tertentu dan himpunan yang benar pada y-range untuk mengisi plot
% dari fungsi tersebut.
% 
% Sebagai catatan, jika anda mengakhiri sebuah baris perintah denagn
% tanda ":", plotnya akan dimasukkan ke layar text. Atau bisa juga
% dengan menekan TAB untuk melihat plotnya jika layar plot tertutup. 
>plot2d("x^2"):
 %image% EMT4Plot2D (2)-004.png
>aspect(1.5); plot2d("x^3-x"):
 %image% EMT4Plot2D (2)-005.png
>a:=5.6; plot2d("exp(-a*x^2)/a"); insimg(30); // menampilkan gambar hasil plot setinggi 25 baris
 %image% EMT4Plot2D (2)-006.png
% Dari beberapa contoh sebelumnya Anda dapat melihat bahwa aslinya
% gambar plot menggunakan sumbu X dengan rentang nilai dari -2 sampai
% dengan 2. Untuk mengubah rentang nilai X dan Y, Anda dapat menambahkan
% nilai-nilai batas X (dan Y) di belakang ekspresi yang digambar.
%% range plot adalah himpunan dari parameter yang tertera. 
% 
% - a,b: x-range (setelan dasar -2,2)
%% - c,d: y-range (setelan dasar : scale with values)
%% - r: denagn alternatif a radius diantara plot tengah
%% - cx,cy: koordinat dari plot center (denagn setelan dasar  0,0)
>plot2d("x^3-x",-1,2):
 %image% EMT4Plot2D (2)-007.png
>plot2d("sin(x)",-2*pi,2*pi): // plot sin(x) pada interval [-2pi, 2pi]
 %image% EMT4Plot2D (2)-008.png
>plot2d("cos(x)","sin(3*x)",xmin=0,xmax=2pi):
 %image% EMT4Plot2D (2)-009.png
% Sebuah alternatif untuk kolom adalah perinath insimg(lines), dimana
% dimasukkan dari mengopukasi plot sebuah angka spesifik dari baris
% text. 
% 
% Dalam beberapa pilihanm plot dapoat diperintahkan untuk muncul
% 
% - Dalam sebuah layar yang dapat diperbesarkecilkan terpisah,
%% - Dalam layar notebook.
% 
% dalam beberapa gaya dapat digunakan untuk mendapatkan plot perintah
% yang spesifik. 
% 
% Dalam beberapa kondisi, tekan kunci tabulasi untuk melihat plot, jika
% itu disembunyikan. 
% 
% Untuk membagi layar menjadi beberapa plot, gunakan perintah figure().
% Dalam beberapa contoh plot kita x^1 menjadi x^4 menjadi 4 bagian dalam
% layar. figure(), mengatur ulang menjadi setelan layar awal.  
>reset;
>figure(2,2); ...
>for n=1 to 4; figure(n); plot2d("x^"+n); end; ...
>figure(0):
 %image% EMT4Plot2D (2)-010.png
% Dalam plot2d(), terdapat gaya alternatif yang tersedia dengan grid=x.
% Untuk sebuah layar penglihatan, kita dapat memperlihatkan dalam
% beberapa variasi grid dalam satu figure (melihat dibawah untuk
% perintah figure()). Style grid=0 tidak termasuk, itu menunjukkan tidak
% adanya grid dan tidak adanya bingkai. 
>figure(3,3); ...
>for k=1:9; figure(k); plot2d("x^3-x",-2,1,grid=k); end; ...
>figure(0):
 %image% EMT4Plot2D (2)-011.png
% Jika argumen untuk plot2d() adalah ekspresi yang diikuti dengan empat
% angka, semua angka ini akan menunjukan pada x-range dan y-range pada
% plot. 
% 
% Sebagai alternatif, a, b, c, d dapat dispesifikkan sebagai parameter
% sebagai a=... dsb. 
% 
% Dalam contoh berikut, kita dapat merubah style grid, menambahkan
% label, dan menggunakan vertikal label untuk y-axis 
>aspect(1.5); plot2d("sin(x)",0,2pi,-1.2,1.2,grid=3,xl="x",yl="sin(x)"):
 %image% EMT4Plot2D (2)-012.png
>plot2d("sin(x)+cos(2*x)",0,4pi):
 %image% EMT4Plot2D (2)-013.png
% Gambar yang digenerate dengan memasukkan plotnya dalam layar text yang
% terdapat dalam kamus yang sama sebagai notebook, sebagai default dalam
% sub-kamus yang bernama "images". Hal tersebut juga menggunakan HTML
% export.
% 
% Anda dapat memberikan tanda yang simpel dalam beberapa gambar dan
% menggandakanya ke dalam clipboard dengan Ctrl-C. Tentu saja, Anda juga
% dapat juga mengeksport beberapa grafik dengan fungsi yang ada pada
% menu File. 
% 
% Fungsi atau ekspresi dalam plot2d adalah adalah dievaluasi dan
% adaptif. Untuk menghemat waktu, matika adaptif plot dengan <adaptive
% and specify the number of subintervals dengan n=...> Ini harus menjadi
% penting dalam beberapa kasus penting.  
>plot2d("sign(x)*exp(-x^2)",-1,1,<adaptive,n=10000):
 %image% EMT4Plot2D (2)-014.png
>plot2d("x^x",r=1.2,cx=1,cy=1):
 %image% EMT4Plot2D (2)-015.png
% Sebagai catatan bahwa x^x adalah tidak didefinisikan sebagai x<=0.
% Fungsi plot 2d nya akan mendapatkan error, dan akan memulai plottingan
% secepatnya sebagai fungsi yang sudah didefinisikan. Ini akan bekerja
% sebagai semua fungsi yang akan kembali NAN dari semua range yang sudah
% didefinisikan.  
>plot2d("log(x)",-0.1,2):
 %image% EMT4Plot2D (2)-016.png
% Parameter ini square=True (or > square) akan memilih y-range otomatis
% sebagai hasil dari layar plot segiempat. Sebagai catatan, Euler akan
% digunakan sebagai tempat segiempat didalam layar plot.  
>plot2d("x^3-x",>square):
 %image% EMT4Plot2D (2)-017.png
>plot2d(''integrate("sin(x)*exp(-x^2)",0,x)'',0,2): // plot integral
 %image% EMT4Plot2D (2)-018.png
% Jika anda memebutuhkan lebih banyak ruang untuk y-label, panggil
% shrinkwindow() dengan parameter yang lebih kecil atau himpunan yang
% value positif untuk "lebih kecil" dalam plot2d().
>plot2d("gamma(x)",1,10,yl="y-values",smaller=6,<vertical):
 %image% EMT4Plot2D (2)-019.png
% Ekspresi simbol dapat juga digunakan, sejak hal tersebut ada sebagai
% ekspresi string yang simpel.
>x=linspace(0,2pi,1000); plot2d(sin(5x),cos(7x)):
 %image% EMT4Plot2D (2)-020.png
>a:=5.6; expr &= exp(-a*x^2)/a; // define expression
>plot2d(expr,-2,2): // plot from -2 to 2
 %image% EMT4Plot2D (2)-021.png
>plot2d(expr,r=1,thickness=2): // plot in a square around (0,0)
 %image% EMT4Plot2D (2)-022.png
>plot2d(&diff(expr,x),>add,style="--",color=red): // add another plot
 %image% EMT4Plot2D (2)-023.png
>plot2d(&diff(expr,x,2),a=-2,b=2,c=-2,d=1): // plot in rectangle
 %image% EMT4Plot2D (2)-024.png
>plot2d(&diff(expr,x),a=-2,b=2,>square): // keep plot square
 %image% EMT4Plot2D (2)-025.png
>plot2d("x^2",0,1,steps=1,color=red,n=10):
 %image% EMT4Plot2D (2)-026.png
>plot2d("x^2",>add,steps=2,color=blue,n=10):
 %image% EMT4Plot2D (2)-027.png
% * Functions in one Parameter
% 
% Fungsi plotting yang cukup penting untuk bidang datar plot adalah
% plot2d(). Fungsi ini adalah implementasi dari bahada Euler dalam file
% "plot.e", yang mana itu menyimpan dan memulai program. 
% 
% Ini adalah beberapa contoh menggunakan fungsi. Sebagai EMT yang biasa
% digunakan, fungsi ini digunakan untuk fungsi lainnya atau ekspresi,
% Anda dapat melewati parameter tambahan (sebelum x) yang mana tiddak
% merupakan variabel global untuk fungsi dengan semicolon parameter atau
% dengan sebuah panggilan koleksi.
>function f(x,a) := x^2/a+a*x^2-x; // define a function
>a=0.3; plot2d("f",0,1;a): // plot with a=0.3
 %image% EMT4Plot2D (2)-028.png
>plot2d("f",0,1;0.4): // plot with a=0.4
 %image% EMT4Plot2D (2)-029.png
>plot2d({{"f",0.2}},0,1): // plot with a=0.2
 %image% EMT4Plot2D (2)-030.png
>plot2d({{"f(x,b)",b=0.1}},0,1): // plot with 0.1
 %image% EMT4Plot2D (2)-031.png
>function f(x) := x^3-x; ...
>plot2d("f",r=1):
 %image% EMT4Plot2D (2)-032.png
% Ini merupakan beberapa rangkuman dari fungsi yang diterima
% 
% - ekspresi atau ekspresi simbol dalam x
%% - fungsi atau simbol fungsi dengan nama sebagai "f"
%% - fungsi simbool hanya menggunakan nama f
% 
% Fungsi plot2d() juga dapat diterima fungsi simbol. Untuk fungsi
% simbolik, namanya hanay bekerja sendiri.
>function f(x) &= diff(x^x,x)

                            x
                           x  (log(x) + 1)

>plot2d(f,0,2):
 %image% EMT4Plot2D (2)-033.png
% Pasti, untuk ekspresi atau ekspresi simbolik merupakan nama dari
% variabel sama dengan plotnya.
>expr &= sin(x)*exp(-x)

                              - x
                             E    sin(x)

>plot2d(expr,0,3pi):
 %image% EMT4Plot2D (2)-034.png
>function f(x) &= x^x;
>plot2d(f,r=1,cx=1,cy=1,color=blue,thickness=2);
>plot2d(&diff(f(x),x),>add,color=red,style="-.-"):
 %image% EMT4Plot2D (2)-035.png
% Untuk gaya garis terdapat beberapa opsi tamabahan.
% 
% - style="...". Pilih dari "-", "--", "-.", ".", ".-.", "-.-".
%% - warna : lihat pada warna dibawah
%% - ketebalan : setelan pabriknya adalah 1. 
% 
% untuk warna dapat dipilih sebagai satu dari warna default, atau
% sebagai warna RGB.
% 
% -0..15: adalah default indikasi warna
%% - warna konstan : putih, hitam, merah, biru, hijau, cyan, olive,
% lightray, gray, darkgray, orange, lightgreen, turqoise, lightblue,
% lightorange, kuning
%% - RGB (Red, Green, Blue atau Merah, Hijau, Biru) : sebagai parameter
% reals dalam [0,1]
>plot2d("exp(-x^2)",r=2,color=red,thickness=3,style="--"):
 %image% EMT4Plot2D (2)-036.png
% Ini adalah tampilan dari warna sebelum didefinisikan dalam EMT. 
>aspect(2); columnsplot(ones(1,16),lab=0:15,grid=0,color=0:15):
 %image% EMT4Plot2D (2)-037.png
% Tapi, anda juga bisa menggunakan warna lainnya juga.
>columnsplot(ones(1,16),grid=0,color=rgb(0,0,linspace(0,1,15))):
 %image% EMT4Plot2D (2)-038.png
% * Menggambar Beberapa Kurva
% * Pada Bidang Koordinat yang Sama
% 
% Plot lebih dari satu fungsi (multiple function) ke dalam satu jendela
% dapat dilakukan dengan berbagai
%% cara. Salah satu metode menggunakan >add untuk beberapa panggilan ke
% plot2d secara keseluruhan,
%% tetapi panggilan pertama. Kami telah menggunakan fitur ini dalam
% contoh di atas.
>aspect(); plot2d("cos(x)",r=2,grid=6); plot2d("x",style=".",>add):
 %image% EMT4Plot2D (2)-039.png
>aspect(1.5); plot2d("sin(x)",0,2pi); plot2d("cos(x)",color=blue,style="--",>add):
 %image% EMT4Plot2D (2)-040.png
% Salah satu kegunaan >add adalah untuk menambahkan titik pada kurva.
>plot2d("sin(x)",0,pi); plot2d(2,sin(2),>points,>add):
 %image% EMT4Plot2D (2)-041.png
% Kita dapat menambahkan titik potong dengan label (pada posisi ”cl”
% untuk kiri tengah), dan memasukkan
%% hasilnya ke dalam notebook. Kami juga menambahkan judul ke plot.
>plot2d(["cos(x)","x"],r=1.1,cx=0.5,cy=0.5, ...
>  color=[black,blue],style=["-","."], ...
>  grid=1);
>x0=solve("cos(x)-x",1);  ...
>  plot2d(x0,x0,>points,>add,title="Intersection Demo");  ...
>  label("cos(x) = x",x0,x0,pos="cl",offset=20):
 %image% EMT4Plot2D (2)-042.png
% Dalam demo berikut, kita memplot fungsi sinc(x)=sin(x)/x dan ekspansi
% Taylor ke-8 dan ke-16. Kami
%% menghitung ekspansi ini menggunakan Maxima melalui ekspresi simbolis.
%% Plot ini dilakukan dalam perintah multi-baris berikut dengan tiga
% panggilan ke plot2d(). Yang kedua
%% dan yang ketiga memiliki set flag >add, yang membuat plot menggunakan
% rentang sebelumnya.
% 
% Kita menambahkan kotak label yang menjelaskan fungsi.
>$taylor(sin(x)/x,x,0,4)
 %image% EMT4Plot2D (2)-043.png
% // latex: \frac{x^4}{120}-\frac{x^2}{6}+1
>plot2d("sinc(x)",0,4pi,color=green,thickness=2); ...
>  plot2d(&taylor(sin(x)/x,x,0,8),>add,color=blue,style="--"); ...
>  plot2d(&taylor(sin(x)/x,x,0,16),>add,color=red,style="-.-"); ...
>  labelbox(["sinc","T8","T16"],styles=["-","--","-.-"], ...
>    colors=[black,blue,red]):
 %image% EMT4Plot2D (2)-044.png
% Dalam contoh berikut, kami menghasilkan Bernstein-Polinomial.
% 
% latex: B_i(x) = \binom{n}{i} x^i (1-x)^{n-i}
% %image% EMT4Plot2D (2)-045.png
% // latex: B_i(x) = \binom{n}{i} x^i (1-x)^{n-i}
>plot2d("(1-x)^10",0,1); // plot first function
>for i=1 to 10; plot2d("bin(10,i)*x^i*(1-x)^(10-i)",>add); end;
>insimg;
 %image% EMT4Plot2D (2)-046.png
% Metode kedua menggunakan pasangan matriks nilai-x dan matriks nilai-y
% yang berukuran sama.
% 
% Kita menghasilkan matriks nilai dengan satu Polinomial Bernstein di
% setiap baris. Untuk ini, kita cukup
%% menggunakan vektor kolom i. Lihat pengantar tentang bahasa matriks
% untuk mempelajari lebih detail.
>x=linspace(0,1,500);
>n=10; k=(0:n)'; // n is row vector, k is column vector
>y=bin(n,k)*x^k*(1-x)^(n-k); // y is a matrix then
>plot2d(x,y):
 %image% EMT4Plot2D (2)-047.png
% Perhatikan bahwa parameter warna dapat berupa vektor. Kemudian setiap
% warna digunakan untuk setiap
%% baris matriks.
>x=linspace(0,1,200); y=x^(1:10)'; plot2d(x,y,color=1:10):
 %image% EMT4Plot2D (2)-048.png
% Metode lain adalah menggunakan vektor ekspresi (string). Anda kemudian
% dapat menggunakan larik
%% warna, larik gaya, dan larik ketebalan dengan panjang yang sama.
>plot2d(["sin(x)","cos(x)"],0,2pi,color=4:5): 
 %image% EMT4Plot2D (2)-049.png
>plot2d(["sin(x)","cos(x)"],0,2pi): // plot vector of expressions
 %image% EMT4Plot2D (2)-050.png
% Kita bisa mendapatkan vektor seperti itu dari Maxima menggunakan
% makelist() dan mxm2str().
>v &= makelist(binomial(10,i)*x^i*(1-x)^(10-i),i,0,10) // make list

               10            9              8  2             7  3
       [(1 - x)  , 10 (1 - x)  x, 45 (1 - x)  x , 120 (1 - x)  x , 
           6  4             5  5             4  6             3  7
210 (1 - x)  x , 252 (1 - x)  x , 210 (1 - x)  x , 120 (1 - x)  x , 
          2  8              9   10
45 (1 - x)  x , 10 (1 - x) x , x  ]

>mxm2str(v) // get a vector of strings from the symbolic vector
(1-x)^10
10*(1-x)^9*x
45*(1-x)^8*x^2
120*(1-x)^7*x^3
210*(1-x)^6*x^4
252*(1-x)^5*x^5
210*(1-x)^4*x^6
120*(1-x)^3*x^7
45*(1-x)^2*x^8
10*(1-x)*x^9
x^10
>plot2d(mxm2str(v),0,1): // plot functions
 %image% EMT4Plot2D (2)-051.png
% Alternatif lain adalah dengan menggunakan bahasa matriks Euler.
% 
% Jika ekspresi menghasilkan matriks fungsi, dengan satu fungsi di
% setiap baris, semua fungsi ini akan diplot
%% ke dalam satu plot.
% 
% Untuk ini, gunakan vektor parameter dalam bentuk vektor kolom. Jika
% array warna ditambahkan, itu
%% akan digunakan untuk setiap baris plot.
>n=(1:10)'; plot2d("x^n",0,1,color=1:10):
 %image% EMT4Plot2D (2)-052.png
% Ekspresi dan fungsi satu baris dapat melihat variabel global.
% 
% Jika Anda tidak dapat menggunakan variabel global, Anda perlu
% menggunakan fungsi dengan parameter
%% tambahan, dan meneruskan parameter ini sebagai parameter titik koma.
% 
% Berhati-hatilah, untuk meletakkan semua parameter yang ditetapkan di
% akhir perintah plot2d. Dalam
%% contoh kita meneruskan a=5 ke fungsi f, yang kita plot dari -10 hingga
% 10.
>function f(x,a) := 1/a*exp(-x^2/a); ...
>plot2d("f",-10,10;5,thickness=2,title="a=5"):
 %image% EMT4Plot2D (2)-053.png
% Atau, gunakan koleksi dengan nama fungsi dan semua parameter tambahan.
% Daftar khusus ini disebut
%% koleksi panggilan, dan itu adalah cara yang lebih disukai untuk
% meneruskan argumen ke fungsi yang
%% dengan sendirinya diteruskan sebagai argumen ke fungsi lain.
% 
% Dalam contoh berikut, kami menggunakan loop untuk memplot beberapa
% fungsi (lihat tutorial tentang
%% pemrograman untuk loop).
>plot2d({{"f",1}},-10,10); ...
>for a=2:10; plot2d({{"f",a}},>add); end:
 %image% EMT4Plot2D (2)-054.png
% Kami dapat mencapai hasil yang sama dengan cara berikut menggunakan
% bahasa matriks EMT. Setiap
%% baris matriks f(x,a) adalah satu fungsi. Selain itu, kita dapat
% mengatur warna untuk setiap baris matriks.
%% Klik dua kali pada fungsi getspectral() untuk penjelasannya.
>x=-10:0.01:10; a=(1:10)'; plot2d(x,f(x,a),color=getspectral(a/10)):
 %image% EMT4Plot2D (2)-055.png
% * Text Labels
% 
% Dekorasi sederhana bisa
% 
% - Judul dengan judul=”...”
%% - x- dan y-label dengan xl=”...”, yl=”...”
%% - Label teks lain dengan label(”...”,x,y)
% 
% Perintah label akan memplot ke dalam plot saat ini pada koordinat plot
% (x,y). Itu bisa mengambil
%% argumen posisi.
>plot2d("x^3-x",-1,2,title="y=x^3-x",yl="y",xl="x"):
 %image% EMT4Plot2D (2)-056.png
>expr := "log(x)/x"; ...
>  plot2d(expr,0.5,5,title="y="+expr,xl="x",yl="y"); ...
>  label("(1,0)",1,0); label("Max",E,expr(E),pos="lc"):
 %image% EMT4Plot2D (2)-057.png
% Ada juga fungsi labelbox(), yang dapat menampilkan fungsi dan teks.
% Dibutuhkan vektor string dan
%% warna, satu item untuk setiap fungsi.
>function f(x) &= x^2*exp(-x^2);  ...
>plot2d(&f(x),a=-3,b=3,c=-1,d=1);  ...
>plot2d(&diff(f(x),x),>add,color=blue,style="--"); ...
>labelbox(["function","derivative"],styles=["-","--"], ...
>   colors=[black,blue],w=0.4):
 %image% EMT4Plot2D (2)-058.png
% Kotak ditambatkan di kanan atas secara default, tetapi >left
% menambatkannya di kiri atas. Anda dapat
%% memindahkannya ke tempat yang Anda suka. Posisi jangkar adalah sudut
% kanan atas kotak, dan angkanya
%% adalah pecahan dari ukuran jendela grafik. Lebarnya otomatis.
% 
% Untuk plot titik, kotak label juga berfungsi. Tambahkan parameter
% >points, atau vektor flag, satu untuk
%% setiap label.
% 
% Dalam contoh berikut, hanya ada satu fungsi. Jadi kita bisa
% menggunakan string sebagai pengganti
%% vektor string. Kami mengatur warna teks menjadi hitam untuk contoh
% ini.
>n=10; plot2d(0:n,bin(n,0:n),>addpoints); ...
>labelbox("Binomials",styles="[]",>points,x=0.1,y=0.1, ...
>tcolor=black,>left):
 %image% EMT4Plot2D (2)-059.png
% Gaya plot ini juga tersedia di statplot(). Seperti di plot2d() warna
% dapat diatur untuk setiap baris plot.
%% Ada lebih banyak plot khusus untuk keperluan statistik (lihat tutorial
% tentang statistik).
>statplot(1:10,random(2,10),color=[red,blue]):
 %image% EMT4Plot2D (2)-060.png
% Fitur serupa adalah fungsi textbox().
% 
% Lebar secara default adalah lebar maksimal dari baris teks. Tapi itu
% bisa diatur oleh pengguna juga.
>function f(x) &= exp(-x)*sin(2*pi*x); ...
>plot2d("f(x)",0,2pi); ...
>textbox(latex("\text{Example of a damped oscillation}\ f(x)=e^{-x}sin(2\pi x)"),w=0.85):
 %image% EMT4Plot2D (2)-061.png
% Label teks, judul, kotak label, dan teks lainnya dapat berisi string
% Unicode (lihat sintaks EMT untuk
%% mengetahui lebih lanjut tentang string Unicode).
>plot2d("x^3-x",title=u"x &rarr; x&sup3; - x"):
 %image% EMT4Plot2D (2)-062.png
% Label pada sumbu x dan y bisa vertikal, begitu juga sumbunya.
>plot2d("sinc(x)",0,2pi,xl="x",yl=u"x &rarr; sinc(x)",>vertical):
 %image% EMT4Plot2D (2)-063.png
% ** LaTeX
% 
% Anda juga dapat memplot rumus LaTeX jika Anda telah menginstal sistem
% LaTeX. Saya merekomendasikan
%% MiKTeX. Jalur ke biner ”lateks” dan ”dvipng” harus berada di jalur
% sistem, atau Anda harus
%% mengatur LaTeX di menu opsi.
% 
% Sebagai catatan, bahwa penguraian LaTeX lambat. Jika Anda ingin
% menggunakan LaTeX dalam plot animasi,
%% Anda harus memanggil latex() sebelum loop sekali dan menggunakan
% hasilnya (gambar dalam matriks
%% RGB).
% 
% Dalam plot berikut, kami menggunakan LaTeX untuk label x dan y, label,
% kotak label, dan judul plot.
>plot2d("exp(-x)*sin(x)/x",a=0,b=2pi,c=0,d=1,grid=6,color=blue, ...
>  title=latex("\text{Function $\Phi$}"), ...
>  xl=latex("\phi"),yl=latex("\Phi(\phi)")); ...
>textbox( ...
>  latex("\Phi(\phi) = e^{-\phi} \frac{\sin(\phi)}{\phi}"),x=0.8,y=0.5); ...
>label(latex("\Phi",color=blue),1,0.4):
 %image% EMT4Plot2D (2)-064.png
% Seringkali, kami menginginkan spasi dan label teks non-konformal pada
% sumbu x. Kita dapat menggunakan
%% xaxis() dan yaxis() seperti yang akan kita tunjukkan nanti.
% 
% langkah termudah adalah dengan membuat plot kosong dengan bingkai
% menggunakan grid=4, lalu menambahkan
%% grid dengan ygrid() dan xgrid(). Dalam contoh berikut, kami
% menggunakan tiga string LaTeX
%% untuk label pada sumbu x dengan xtick().
>plot2d("sinc(x)",0,2pi,grid=4,<ticks); ...
>ygrid(-2:0.5:2,grid=6); ...
>xgrid([0:2]*pi,<ticks,grid=6);  ...
>xtick([0,pi,2pi],["0","\pi","2\pi"],>latex):
 %image% EMT4Plot2D (2)-065.png
% Tentu saja, fungsi juga dapat digunakan.
>function map f(x) ...
$if x>0 then return x^4
$else return x^2
$endif
$endfunction
% Parameter ”map” membantu menggunakan fungsi untuk vektor. Untuk
%% plot, itu tidak perlu. Tetapi untuk mendemonstrasikan vektorisasi itu
%% berguna, kami menambahkan beberapa poin kunci ke plot di x=-1, x=0 dan
% x=1.
% 
% Pada plot berikut, kami juga memasukkan beberapa kode LaTeX. Kami
% menggunakannya untuk
%% dua label dan kotak teks. Tentu saja, Anda hanya akan dapat
% menggunakan
%% LaTeX jika Anda telah menginstal LaTeX dengan benar.
>plot2d("f",-1,1,xl="x",yl="f(x)",grid=6);  ...
>plot2d([-1,0,1],f([-1,0,1]),>points,>add); ...
>label(latex("x^3"),0.72,f(0.72)); ...
>label(latex("x^2"),-0.52,f(-0.52),pos="ll"); ...
>textbox( ...
>  latex("f(x)=\begin{cases} x^3 & x>0 \\ x^2 & x \le 0\end{cases}"), ...
>  x=0.7,y=0.2):
 %image% EMT4Plot2D (2)-066.png
% 
% ** User Interaction
% 
% Saat memplot fungsi atau ekspresi, parameter >user memungkinkan
% pengguna untuk memperbesar dan
%% menggeser plot dengan tombol kursor atau mouse. Pengguna dapat:
% 
% - perbesar dengan + atau -
%% - pindahkan plot dengan tombol kursor
%% - pilih jendela plot dengan mouse
%% - atur ulang tampilan dengan spasi
%% - keluar dengan kembali
% 
% Tombol spasi akan mengatur ulang plot ke jendela plot asli.
%% Saat memplot data, flag >user hanya akan menunggu penekanan tombol.
>plot2d({{"x^3-a*x",a=1}},>user,title="Press any key!"):
 %image% EMT4Plot2D (2)-067.png
>plot2d("exp(x)*sin(x)",user=true, ...
>  title="+/- or cursor keys (return to exit)"):
 %image% EMT4Plot2D (2)-068.png
% Berikut ini menunjukkan cara interaksi pengguna tingkat lanjut (lihat
% tutorial tentang pemrograman
%% untuk detailnya).
% 
% Fungsi bawaan mousedrag() menunggu event mouse atau keyboard. Ini
% melaporkan mouse ke bawah,
%% mouse dipindahkan atau mouse ke atas, dan penekanan tombol. Fungsi
% dragpoints() memanfaatkan ini,
%% dan memungkinkan pengguna menyeret titik mana pun dalam plot.
% 
% Kita membutuhkan fungsi plot terlebih dahulu. Sebagai contoh, kita
% interpolasi dalam 5 titik dengan
%% polinomial. Fungsi harus diplot ke area plot tetap.
>function plotf(xp,yp,select) ...
$  d=interp(xp,yp);
$  plot2d("interpval(xp,d,x)";d,xp,r=2);
$  plot2d(xp,yp,>points,>add);
$  if select>0 then
$    plot2d(xp[select],yp[select],color=red,>points,>add);
$  endif;
$  title("Drag one point, or press space or return!");
$endfunction
% Perhatikan parameter titik koma di plot2d (d dan xp), yang diteruskan
% ke evaluasi fungsi interp(). Tanpa
%% ini, kita harus menulis fungsi plotinterp() terlebih dahulu, mengakses
% nilai secara global.
% 
% Sekarang kita menghasilkan beberapa nilai acak, dan membiarkan
% pengguna menyeret poin.
>t=-1:0.5:1; dragpoints("plotf",t,random(size(t))-0.5):
 %image% EMT4Plot2D (2)-069.png
% Ada juga fungsi, yang memplot fungsi lain tergantung pada vektor
% parameter, dan memungkinkan pengguna
%% menyesuaikan parameter ini.
% 
% Pertama kita membutuhkan fungsi plot.
>function plotf([a,b]) := plot2d("exp(a*x)*cos(2pi*b*x)",0,2pi;a,b);
% Kemudian kita membutuhkan nama untuk parameter, nilai awal dan matriks
% rentang nx2, opsional baris
%% judul.
% 
% Ada slider interaktif, yang dapat mengatur nilai oleh pengguna. Fungsi
% dragvalues() menyediakan ini.
>dragvalues("plotf",["a","b"],[-1,2],[[-2,2];[1,10]], ...
>  heading="Drag these values:",hcolor=black):
 %image% EMT4Plot2D (2)-070.png
% Dimungkinkan untuk membatasi nilai yang diseret ke bilangan bulat.
% Sebagai contoh, kita menulis fungsi
%% plot, yang memplot polinomial Taylor derajat n ke fungsi kosinus.
>function plotf(n) ...
$plot2d("cos(x)",0,2pi,>square,grid=6);
$plot2d(&"taylor(cos(x),x,0,@n)",color=blue,>add);
$textbox("Taylor polynomial of degree "+n,0.1,0.02,style="t",>left);
$endfunction
% Sekarang kami mengizinkan derajat n bervariasi dari 0 hingga 20 dalam
% 20 pemberhentian. Hasil dragvalues()
%% digunakan untuk memplot sketsa dengan n ini, dan untuk memasukkan plot
% ke dalam buku
%% catatan.
>nd=dragvalues("plotf","degree",2,[0,20],20,y=0.8, ...
>   heading="Drag the value:"); ...
>plotf(nd):
 %image% EMT4Plot2D (2)-071.png
% Berikut ini adalah demonstrasi sederhana dari fungsi tersebut.
% Pengguna dapat menggambar di atas
%% jendela plot, meninggalkan jejak poin.
>function dragtest ...
$  plot2d(none,r=1,title="Drag with the mouse, or press any key!");
$  start=0;
$  repeat
$    {flag,m,time}=mousedrag();
$    if flag==0 then return; endif;
$    if flag==2 then
$      hold on; mark(m[1],m[2]); hold off;
$    endif;
$  end
$endfunction
>dragtest // lihat hasilnya dan cobalah lakukan!
% ** Styles of 2D Plots
% 
% Secara default, EMT menghitung tick sumbu otomatis dan menambahkan
% label ke setiap tick. Ini dapat
%% diubah dengan parameter grid. Gaya default sumbu dan label dapat
% dimodifikasi. Selain itu, label dan
%% judul dapat ditambahkan secara manual. Untuk mengatur ulang ke gaya
% default, gunakan reset().
>aspect();
>figure(3,4); ...
> figure(1); plot2d("x^3-x",grid=0); ... // no grid, frame or axis
> figure(2); plot2d("x^3-x",grid=1); ... // x-y-axis
> figure(3); plot2d("x^3-x",grid=2); ... // default ticks
> figure(4); plot2d("x^3-x",grid=3); ... // x-y- axis with labels inside
> figure(5); plot2d("x^3-x",grid=4); ... // no ticks, only labels
> figure(6); plot2d("x^3-x",grid=5); ... // default, but no margin
> figure(7); plot2d("x^3-x",grid=6); ... // axes only
> figure(8); plot2d("x^3-x",grid=7); ... // axes only, ticks at axis
> figure(9); plot2d("x^3-x",grid=8); ... // axes only, finer ticks at axis
> figure(10); plot2d("x^3-x",grid=9); ... // default, small ticks inside
> figure(11); plot2d("x^3-x",grid=10); ...// no ticks, axes only
> figure(0):
 %image% EMT4Plot2D (2)-072.png
% Parameter <frame mematikan frame, dan framecolor=blue mengatur frame
% ke warna biru.
% 
% Jika Anda ingin centang sendiri, Anda dapat menggunakan style=0, dan
% menambahkan semuanya nanti.
>aspect(1.5); 
>plot2d("x^3-x",grid=0); // plot
>frame; xgrid([-1,0,1]); ygrid(0): // add frame and grid
 %image% EMT4Plot2D (2)-073.png
% Untuk judul plot dan label sumbu, lihat contoh berikut.
>plot2d("exp(x)",-1,1);
>textcolor(black); // set the text color to black
>title(latex("y=e^x")); // title above the plot
>xlabel(latex("x")); // "x" for x-axis
>ylabel(latex("y"),>vertical); // vertical "y" for y-axis
>label(latex("(0,1)"),0,1,color=blue): // label a point
 %image% EMT4Plot2D (2)-074.png
% Sumbu dapat digambar secara terpisah dengan xaxis() dan yaxis().
>plot2d("x^3-x",<grid,<frame);
>xaxis(0,xx=-2:1,style="->"); yaxis(0,yy=-5:5,style="->"):
 %image% EMT4Plot2D (2)-075.png
% Teks pada plot dapat diatur dengan label(). Dalam contoh berikut, ”lc”
% berarti tengah bawah. Ini
%% mengatur posisi label relatif terhadap koordinat plot.
>function f(x) &= x^3-x

                                 3
                                x  - x

>plot2d(f,-1,1,>square);
>x0=fmin(f,0,1); // compute point of minimum
>label("Rel. Min.",x0,f(x0),pos="lc"): // add a label there
 %image% EMT4Plot2D (2)-076.png
% Ada juga kotak yang memuat teks.
>plot2d(&f(x),-1,1,-2,2); // function
>plot2d(&diff(f(x),x),>add,style="--",color=red); // derivative
>labelbox(["f","f'"],["-","--"],[black,red]): // label box
 %image% EMT4Plot2D (2)-077.png
>plot2d(["exp(x)","1+x"],color=[black,blue],style=["-","-.-"]):
 %image% EMT4Plot2D (2)-078.png
>gridstyle("->",color=gray,textcolor=gray,framecolor=gray);  ...
> plot2d("x^3-x",grid=1);   ...
> settitle("y=x^3-x",color=black); ...
> label("x",2,0,pos="bc",color=gray);  ...
> label("y",0,6,pos="cl",color=gray); ...
> reset():
 %image% EMT4Plot2D (2)-079.png
% Untuk kontrol lebih, sumbu x dan sumbu y dapat dilakukan secara
% manual.
% 
% Perintah fullwindow() memperluas jendela plot karena kita tidak lagi
% membutuhkan tempat untuk label
%% di luar jendela plot. Gunakan shrinkwindow() atau reset() untuk
% mengatur ulang ke default.
>fullwindow; ...
> gridstyle(color=darkgray,textcolor=darkgray); ...
> plot2d(["2^x","1","2^(-x)"],a=-2,b=2,c=0,d=4,<grid,color=4:6,<frame); ...
> xaxis(0,-2:1,style="->"); xaxis(0,2,"x",<axis); ...
> yaxis(0,4,"y",style="->"); ...
> yaxis(-2,1:4,>left); ...
> yaxis(2,2^(-2:2),style=".",<left); ...
> labelbox(["2^x","1","2^-x"],colors=4:6,x=0.8,y=0.2); ...
> reset:
 %image% EMT4Plot2D (2)-080.png
% Berikut adalah contoh lain, di mana string Unicode digunakan dan sumbu
% di luar area plot.
>aspect(1.5); 
>plot2d(["sin(x)","cos(x)"],0,2pi,color=[red,green],<grid,<frame); ...
> xaxis(-1.1,(0:2)*pi,xt=["0",u"&pi;",u"2&pi;"],style="-",>ticks,>zero);  ...
> xgrid((0:0.5:2)*pi,<ticks); ...
> yaxis(-0.1*pi,-1:0.2:1,style="-",>zero,>grid); ...
> labelbox(["sin","cos"],colors=[red,green],x=0.5,y=0.2,>left); ...
> xlabel(u"&phi;"); ylabel(u"f(&phi;)"):
 %image% EMT4Plot2D (2)-081.png
% * Plotting 2D Data
% 
% Jika x dan y adalah vektor data, data ini akan digunakan sebagai
% koordinat x dan y dari suatu kurva.
%% Dalam hal ini, a, b, c, dan d, atau radius r dapat ditentukan, atau
% jendela plot akan menyesuaikan secara
%% otomatis dengan data. Atau, >persegi dapat diatur untuk menjaga rasio
% aspek persegi.
% 
% Memplot ekspresi hanyalah singkatan untuk plot data. Untuk plot data,
% Anda memerlukan satu atau
%% beberapa baris nilai x, dan satu atau beberapa baris nilai y. Dari
% rentang dan nilai-x, fungsi plot2d akan
%% menghitung data yang akan diplot, secara default dengan evaluasi
% fungsi yang adaptif. Untuk plot titik
%% gunakan ”>points”, untuk garis campuran dan titik gunakan
% ”>addpoints”.
% 
% Tapi Anda bisa memasukkan data secara langsung.
%% - Gunakan vektor baris untuk x dan y untuk satu fungsi.
%% - Matriks untuk x dan y diplot baris demi baris.
% 
% Berikut adalah contoh dengan satu baris untuk x dan y.
>x=-10:0.1:10; y=exp(-x^2)*x; plot2d(x,y):
 %image% EMT4Plot2D (2)-082.png
% Data juga dapat diplot sebagai titik. Gunakan poin=true untuk ini.
% Plotnya bekerja seperti poligon,
%% tetapi hanya menggambar sudut-sudutnya.
% 
% - style=”...”: Pilih dari ”[]”, ”<>”, ”o”, ”.”, ”..”, ”+”, ”*”, ”[]”,
% ”< >”, ”o”, ”..”, ””, ”|”.
% 
% Untuk memplot set poin gunakan >points. Jika warna adalah vektor
% warna, setiap titik
%% mendapat warna yang berbeda. Untuk matriks koordinat dan vektor kolom,
% warna berlaku untuk baris
%% matriks.
%% Parameter >addpoints menambahkan titik ke segmen garis untuk plot
% data.
>xdata=[1,1.5,2.5,3,4]; ydata=[3,3.1,2.8,2.9,2.7]; // data
>plot2d(xdata,ydata,a=0.5,b=4.5,c=2.5,d=3.5,style="."); // lines
>plot2d(xdata,ydata,>points,>add,style="o"): // add points
 %image% EMT4Plot2D (2)-083.png
>p=polyfit(xdata,ydata,1); // get regression line
>plot2d("polyval(p,x)",>add,color=red): // add plot of line
 %image% EMT4Plot2D (2)-084.png
% * Menggambar Daerah Yang Dibatasi Kurva
% 
% Plot data benar-benar poligon. Kita juga dapat memplot kurva atau
% kurva terisi.
% 
% - terisi=benar mengisi plot.
%% - style=”...”: Pilih dari ””, ”/”, ”\”, ”\/”.
%% - fillcolor: Lihat di atas untuk warna yang tersedia.
% 
% Warna isian ditentukan oleh argumen ”fillcolor”, dan pada <outline
% opsional mencegah menggambar
%% batas untuk semua gaya kecuali yang default.
>t=linspace(0,2pi,1000); // parameter for curve
>x=sin(t)*exp(t/pi); y=cos(t)*exp(t/pi); // x(t) and y(t)
>figure(1,2); aspect(16/9)
>figure(1); plot2d(x,y,r=10); // plot curve
>figure(2); plot2d(x,y,r=10,>filled,style="/",fillcolor=red); // fill curve
>figure(0):
 %image% EMT4Plot2D (2)-085.png
% Dalam contoh berikut kami memplot elips terisi dan dua segi enam
% terisi menggunakan kurva tertutup
%% dengan 6 titik dengan gaya isian berbeda.
>x=linspace(0,2pi,1000); plot2d(sin(x),cos(x)*0.5,r=1,>filled,style="/"):
 %image% EMT4Plot2D (2)-086.png
>t=linspace(0,2pi,6); ...
>plot2d(cos(t),sin(t),>filled,style="/",fillcolor=red,r=1.2):
 %image% EMT4Plot2D (2)-087.png
>t=linspace(0,2pi,6); plot2d(cos(t),sin(t),>filled,style="#"):
 %image% EMT4Plot2D (2)-088.png
% Contoh lainnya adalah segi tujuh, yang kita buat dengan tujuh titik
% pada lingkaran satuan.
>t=linspace(0,2pi,7);  ...
> plot2d(cos(t),sin(t),r=1,>filled,style="/",fillcolor=red):
 %image% EMT4Plot2D (2)-089.png
% Berikut ini adalah himpunan nilai maksimal dari empat kondisi linier
% yang kurang dari atau sama dengan
%% 3. Ini adalah A[k].v<=3 untuk semua baris A. Untuk mendapatkan sudut
% yang bagus, kita menggunakan
%% n yang relatif besar.
>A=[2,1;1,2;-1,0;0,-1];
>function f(x,y) := max([x,y].A');
>plot2d("f",r=4,level=[0;3],color=green,n=111):
 %image% EMT4Plot2D (2)-090.png
% Poin utama dari bahasa matriks adalah memungkinkan untuk menghasilkan
% tabel fungsi dengan mudah.
>t=linspace(0,2pi,1000); x=cos(3*t); y=sin(4*t);
% Kami sekarang memiliki vektor x dan y nilai. plot2d() dapat memplot
% nilai-nilai ini
%% sebagai kurva yang menghubungkan titik-titik. Plotnya bisa diisi. Pada
% kasus ini
%% ini menghasilkan hasil yang bagus karena aturan lilitan, yang
% digunakan untuk
%% isi.
>plot2d(x,y,<grid,<frame,>filled):
 %image% EMT4Plot2D (2)-091.png
% Sebuah vektor interval diplot terhadap nilai x sebagai daerah terisi
%% antara nilai interval bawah dan atas.
% 
% Hal ini dapat berguna untuk memplot kesalahan perhitungan. Tapi itu
% bisa
%% juga digunakan untuk memplot kesalahan statistik.
>t=0:0.1:1; ...
> plot2d(t,interval(t-random(size(t)),t+random(size(t))),style="|");  ...
> plot2d(t,t,add=true):
 %image% EMT4Plot2D (2)-092.png
% Jika x adalah vektor yang diurutkan, dan y adalah vektor interval,
% maka plot2d akan memplot rentang
%% interval yang terisi dalam bidang. Gaya isian sama dengan gaya
% poligon.
>t=-1:0.01:1; x=~t-0.01,t+0.01~; y=x^3-x;
>plot2d(t,y):
 %image% EMT4Plot2D (2)-093.png
% 
% Dimungkinkan untuk mengisi wilayah nilai untuk fungsi tertentu. Untuk
%% ini, level harus berupa matriks 2xn. Baris pertama adalah batas bawah
%% dan baris kedua berisi batas atas.
>expr := "2*x^2+x*y+3*y^4+y"; // define an expression f(x,y)
>plot2d(expr,level=[0;1],style="-",color=blue): // 0 <= f(x,y) <= 1
 %image% EMT4Plot2D (2)-094.png
% Kami juga dapat mengisi rentang nilai seperti
% 
% latex: -1 \le (x^2+y^2)^2-x^2+y^2 \le 0.
% %image% EMT4Plot2D (2)-095.png
% // latex: -1 \le (x^2+y^2)^2-x^2+y^2 \le 0.
% 
% 
>plot2d("(x^2+y^2)^2-x^2+y^2",r=1.2,level=[-1;0],style="/"):
 %image% EMT4Plot2D (2)-096.png
>plot2d("cos(x)","sin(x)^3",xmin=0,xmax=2pi,>filled,style="/"):
 %image% EMT4Plot2D (2)-097.png
% * Grafik Fungsi Parametrik
% 
% Nilai-x tidak perlu diurutkan. (x,y) hanya menggambarkan kurva. Jika x
% diurutkan, kurva tersebut
%% merupakan grafik fungsi.
% 
% Dalam contoh berikut, kami memplot spiral
% 
% latex: \gamma(t) = t \cdot (\cos(2\pi t),\sin(2\pi t))
% %image% EMT4Plot2D (2)-098.png
% // latex: \gamma(t) = t \cdot (\cos(2\pi t),\sin(2\pi t))
% 
% 
% Kita perlu menggunakan banyak titik untuk tampilan yang halus atau
% fungsi adaptive() untuk mengevaluasi
%% ekspresi (lihat fungsi adaptive() untuk lebih jelasnya).
>t=linspace(0,1,1000); ...
>plot2d(t*cos(2*pi*t),t*sin(2*pi*t),r=1):
 %image% EMT4Plot2D (2)-099.png
% Atau, dimungkinkan untuk menggunakan dua ekspresi untuk kurva. Berikut
% ini plot kurva yang sama
%% seperti di atas.
>plot2d("x*cos(2*pi*x)","x*sin(2*pi*x)",xmin=0,xmax=1,r=1):
 %image% EMT4Plot2D (2)-100.png
>t=linspace(0,1,1000); r=exp(-t); x=r*cos(2pi*t); y=r*sin(2pi*t);
>plot2d(x,y,r=1):
 %image% EMT4Plot2D (2)-101.png
% Dalam contoh berikutnya, kami memplot kurva
%% latex: \gamma(t) = (r(t) \cos(t), r(t) \sin(t))
% %image% EMT4Plot2D (2)-102.png
% // latex: \gamma(t) = (r(t) \cos(t), r(t) \sin(t))
% 
% 
% dengan
% 
% latex: r(t) = 1 + \dfrac{\sin(3t)}{2}.
% %image% EMT4Plot2D (2)-103.png
% // latex: r(t) = 1 + \dfrac{\sin(3t)}{2}.
>t=linspace(0,2pi,1000); r=1+sin(3*t)/2; x=r*cos(t); y=r*sin(t); ...
>plot2d(x,y,>filled,fillcolor=red,style="/",r=1.5):
 %image% EMT4Plot2D (2)-104.png
% * Menggambar Grafik Bilangan Kompleks
% 
% Sebaran bilangan kompleks juga dapat diplot. Kemudian titik-titik grid
% akan terhubung. Jika sejumlah
%% garis kisi ditentukan (atau vektor garis kisi 1x2) dalam argumen
% cgrid, hanya garis kisi tersebut yang
%% terlihat.
% 
% Matriks bilangan kompleks akan secara otomatis diplot sebagai kisi di
% bidang kompleks.
% 
% Dalam contoh berikut, kami memplot gambar lingkaran satuan di bawah
% fungsi eksponensial. Parameter
%% cgrid menyembunyikan beberapa kurva grid.
>aspect(); r=linspace(0,1,50); a=linspace(0,2pi,80)'; z=r*exp(I*a);...
>plot2d(z,a=-1.25,b=1.25,c=-1.25,d=1.25,cgrid=10):
 %image% EMT4Plot2D (2)-105.png
>aspect(1.25); r=linspace(0,1,50); a=linspace(0,2pi,200)'; z=r*exp(I*a);
>plot2d(exp(z),cgrid=[40,10]):
 %image% EMT4Plot2D (2)-106.png
>r=linspace(0,1,10); a=linspace(0,2pi,40)'; z=r*exp(I*a);
>plot2d(exp(z),>points,>add):
 %image% EMT4Plot2D (2)-107.png
% Sebuah vektor bilangan kompleks secara otomatis diplot sebagai kurva
% pada bidang kompleks dengan
%% bagian real dan bagian imajiner.
% 
% Dalam contoh, kami memplot lingkaran satuan dengan
% 
% latex: \gamma(t) = e^{it}
% %image% EMT4Plot2D (2)-108.png
% // latex: \gamma(t) = e^{it}
>t=linspace(0,2pi,1000); ...
>plot2d(exp(I*t)+exp(4*I*t),r=2):
 %image% EMT4Plot2D (2)-109.png
% * Statistical Plots
% 
% Ada banyak fungsi yang dikhususkan pada plot statistik. Salah satu
% plot yang sering digunakan adalah
%% plot kolom.
% 
% Jumlah kumulatif dari nilai terdistribusi 0-1-normal menghasilkan
% jalan acak.
>plot2d(cumsum(randnormal(1,1000))):
 %image% EMT4Plot2D (2)-110.png
% Menggunakan dua baris menunjukkan jalan dalam dua dimensi.
>X=cumsum(randnormal(2,1000)); plot2d(X[1],X[2]):
 %image% EMT4Plot2D (2)-111.png
>columnsplot(cumsum(random(10)),style="/",color=blue):
 %image% EMT4Plot2D (2)-112.png
% Itu juga dapat menampilkan string sebagai label.
>months=["Jan","Feb","Mar","Apr","May","Jun", ...
>  "Jul","Aug","Sep","Oct","Nov","Dec"];
Variable months not found!
Error in:
... nths=["Jan","Feb","Mar","Apr","May","Jun", months=["Jan","Feb" ...
                                                     ^
>values=[10,12,12,18,22,28,30,26,22,18,12,8];
>columnsplot(values,lab=months,color=red,style="-");
Variable months not found!
Error in:
columnsplot(values,lab=months,color=red,style="-"); ...
                             ^
>title("Temperature"):
 %image% EMT4Plot2D (2)-113.png
>k=0:10;
>plot2d(k,bin(10,k),>bar):
 %image% EMT4Plot2D (2)-114.png
>plot2d(k,bin(10,k)); plot2d(k,bin(10,k),>points,>add):
 %image% EMT4Plot2D (2)-115.png
>plot2d(normal(1000),normal(1000),>points,grid=6,style=".."):
 %image% EMT4Plot2D (2)-116.png
>plot2d(normal(1,1000),>distribution,style="O"):
 %image% EMT4Plot2D (2)-117.png
>plot2d("qnormal",0,5;2.5,0.5,>filled):
 %image% EMT4Plot2D (2)-118.png
% Untuk memplot distribusi statistik eksperimental, Anda dapat
% menggunakan distribution=n dengan
%% plot2d.
>w=randexponential(1,1000); // exponential distribution
>plot2d(w,>distribution): // or distribution=n with n intervals
 %image% EMT4Plot2D (2)-119.png
% Atau Anda dapat menghitung distribusi dari data dan memplot hasilnya
% dengan >bar di plot3d, atau
%% dengan plot kolom.
>w=normal(1000); // 0-1-normal distribution
>{x,y}=histo(w,10,v=[-6,-4,-2,-1,0,1,2,4,6]); // interval bounds v
>plot2d(x,y,>bar):
 %image% EMT4Plot2D (2)-120.png
% Fungsi statplot() menyetel gaya dengan string sederhana.
>statplot(1:10,cumsum(random(10)),"b"):
 %image% EMT4Plot2D (2)-121.png
>n=10; i=0:n; ...
>plot2d(i,bin(n,i)/2^n,a=0,b=10,c=0,d=0.3); ...
>plot2d(i,bin(n,i)/2^n,points=true,style="ow",add=true,color=blue):
 %image% EMT4Plot2D (2)-122.png
% Lebih dari pada itu, data dapat diplot sebagai batang. Dalam hal ini,
% x harus diurutkan dan satu elemen lebih
%% panjang dari y. Bilah akan memanjang dari x[i] ke x[i+1] dengan nilai
% y[i]. Jika x memiliki ukuran yang
%% sama dengan y, maka akan diperpanjang satu elemen dengan spasi
% terakhir.
%% Gaya isian dapat digunakan seperti di atas.
>n=10; k=bin(n,0:n); ...
>plot2d(-0.5:n+0.5,k,bar=true,fillcolor=lightgray):
 %image% EMT4Plot2D (2)-123.png
% Data untuk plot batang (bar=1) dan histogram (histogram=1) dapat
% dinyatakan secara eksplisit dalam xv
%% dan yv, atau dapat dihitung dari distribusi empiris dalam xv dengan
% >distribution (atau distribution=n).
%% Histogram nilai xv akan dihitung secara otomatis dengan >histogram.
% Jika >even ditentukan, nilai xv
%% akan dihitung dalam interval bilangan bulat.
>plot2d(normal(10000),distribution=50):
 %image% EMT4Plot2D (2)-124.png
>k=0:10; m=bin(10,k); x=(0:11)-0.5; plot2d(x,m,>bar):
 %image% EMT4Plot2D (2)-125.png
>columnsplot(m,k):
 %image% EMT4Plot2D (2)-126.png
>plot2d(random(600)*6,histogram=6):
 %image% EMT4Plot2D (2)-127.png
% Untuk distribusi, ada parameter distribution=n, yang menghitung nilai
% secara otomatis dan mencetak
%% distribusi relatif dengan n sub-interval.
>plot2d(normal(1,1000),distribution=10,style="\/"):
 %image% EMT4Plot2D (2)-128.png
% Dengan parameter even=true, ini akan menggunakan interval integer.
>plot2d(intrandom(1,1000,10),distribution=10,even=true):
 %image% EMT4Plot2D (2)-129.png
% Perhatikan bahwa ada banyak plot statistik, yang mungkin berguna.
% Silahkan lihat tutorial tentang
%% statistik.
>columnsplot(getmultiplicities(1:6,intrandom(1,6000,6))):
 %image% EMT4Plot2D (2)-130.png
>plot2d(normal(1,1000),>distribution); ...
>  plot2d("qnormal(x)",color=red,thickness=2,>add):
 %image% EMT4Plot2D (2)-131.png
% Ada juga banyak plot khusus untuk statistik. Boxplot menunjukkan
% kuartil dari distribusi ini dan banyak
%% outlier. Menurut definisi, outlier dalam boxplot adalah data yang
% melebihi 1,5 kali kisaran 50% tengah
%% plot.
>M=normal(5,1000); boxplot(quartiles(M)):
 %image% EMT4Plot2D (2)-132.png
% * Implicit Functions
% 
% Plot implisit menunjukkan garis level yang menyelesaikan f(x,y)=level,
% di mana ”level” dapat berupa nilai
%% tunggal atau vektor nilai. Jika level=”auto”, akan ada garis level nc,
% yang akan menyebar antara fungsi
%% minimum dan maksimum secara merata. Warna yang lebih gelap atau lebih
% terang dapat ditambahkan
%% dengan >hue untuk menunjukkan nilai fungsi. Untuk fungsi implisit, xv
% harus berupa fungsi atau ekspresi
%% dari parameter x dan y, atau, sebagai alternatif, xv dapat berupa
% matriks nilai.
% 
% Euler dapat menandai garis level
% 
% latex: f(x,y) = c
% %image% EMT4Plot2D (2)-133.png
% // latex: f(x,y) = c
% 
% 
% dari fungsi apapun.
% 
% Untuk menggambar himpunan f(x,y)=c untuk satu atau lebih konstanta c,
% Anda dapat menggunakan
%% plot2d() dengan plot implisitnya di dalam bidang. Parameter untuk c
% adalah level=c, di mana c dapat
%% berupa vektor garis level. Selain itu, skema warna dapat digambar di
% latar belakang untuk menunjukkan
%% nilai fungsi untuk setiap titik dalam plot. Parameter ”n” menentukan
% kehalusan plot.
>aspect(1.5); 
>plot2d("x^2+y^2-x*y-x",r=1.5,level=0,contourcolor=red):
 %image% EMT4Plot2D (2)-134.png
>expr := "2*x^2+x*y+3*y^4+y"; // define an expression f(x,y)
>plot2d(expr,level=0): // Solutions of f(x,y)=0
 %image% EMT4Plot2D (2)-135.png
>plot2d(expr,level=0:0.5:20,>hue,contourcolor=white,n=200): // nice
 %image% EMT4Plot2D (2)-136.png
>plot2d(expr,level=0:0.5:20,>hue,>spectral,n=200,grid=4): // nicer
 %image% EMT4Plot2D (2)-137.png
% Ini juga bekerja untuk plot data. Tetapi Anda harus menentukan
% rentangnya
%% untuk label sumbu.
>x=-2:0.05:1; y=x'; z=expr(x,y);
>plot2d(z,level=0,a=-1,b=2,c=-2,d=1,>hue):
 %image% EMT4Plot2D (2)-138.png
>plot2d("x^3-y^2",>contour,>hue,>spectral):
 %image% EMT4Plot2D (2)-139.png
>plot2d("x^3-y^2",level=0,contourwidth=3,>add,contourcolor=red):
 %image% EMT4Plot2D (2)-140.png
>z=z+normal(size(z))*0.2;
>plot2d(z,level=0.5,a=-1,b=2,c=-2,d=1):
 %image% EMT4Plot2D (2)-141.png
>plot2d(expr,level=[0:0.2:5;0.05:0.2:5.05],color=lightgray):
 %image% EMT4Plot2D (2)-142.png
>plot2d("x^2+y^3+x*y",level=1,r=4,n=100):
 %image% EMT4Plot2D (2)-143.png
>plot2d("x^2+2*y^2-x*y",level=0:0.1:10,n=100,contourcolor=white,>hue):
 %image% EMT4Plot2D (2)-144.png
% Juga dimungkinkan untuk mengisi himpunan
% 
% latex: a \le f(x,y) \le b
% %image% EMT4Plot2D (2)-145.png
% // latex: a \le f(x,y) \le b
% 
% dengan rentang tingkat.
%% Dimungkinkan untuk mengisi wilayah nilai untuk fungsi tertentu. Untuk
% ini, level harus berupa matriks
%% 2xn. Baris pertama adalah batas bawah dan baris kedua berisi batas
% atas.
>plot2d(expr,level=[0;1],style="-",color=blue): // 0 <= f(x,y) <= 1
 %image% EMT4Plot2D (2)-146.png
% Plot implisit juga dapat menunjukkan rentang level. Kemudian level
% harus berupa matriks 2xn dari
%% interval level, di mana baris pertama berisi awal dan baris kedua
% adalah akhir dari setiap interval. Atau,
%% vektor baris sederhana dapat digunakan untuk level, dan parameter dl
% memperluas nilai level ke interval.
>plot2d("x^4+y^4",r=1.5,level=[0;1],color=blue,style="/"):
 %image% EMT4Plot2D (2)-147.png
>plot2d("x^2+y^3+x*y",level=[0,2,4;1,3,5],style="/",r=2,n=100):
 %image% EMT4Plot2D (2)-148.png
>plot2d("x^2+y^3+x*y",level=-10:20,r=2,style="-",dl=0.1,n=100):
 %image% EMT4Plot2D (2)-149.png
>plot2d("sin(x)*cos(y)",r=pi,>hue,>levels,n=100):
 %image% EMT4Plot2D (2)-150.png
% Dimungkinkan juga untuk menandai suatu wilayah
% 
% latex: a \le f(x,y) \le b.
% %image% EMT4Plot2D (2)-151.png
% // latex: a \le f(x,y) \le b.
% 
% Ini dilakukan dengan menambahkan level dengan dua baris.
>plot2d("(x^2+y^2-1)^3-x^2*y^3",r=1.3, ...
>  style="#",color=red,<outline, ...
>  level=[-2;0],n=100):
 %image% EMT4Plot2D (2)-152.png
% 
% Dimungkinkan untuk menentukan level tertentu. Misalnya, kita dapat
% memplot solusi persamaan seperti:
% 
% latex: x^3-xy+x^2y^2=6
% %image% EMT4Plot2D (2)-153.png
% // latex: x^3-xy+x^2y^2=6
>plot2d("x^3-x*y+x^2*y^2",r=6,level=1,n=100):
 %image% EMT4Plot2D (2)-154.png
>function starplot1 (v, style="/", color=green, lab=none) ...
$  if !holding() then clg; endif;
$  w=window(); window(0,0,1024,1024);
$  h=holding(1);
$  r=max(abs(v))*1.2;
$  setplot(-r,r,-r,r);
$  n=cols(v); t=linspace(0,2pi,n);
$  v=v|v[1]; c=v*cos(t); s=v*sin(t);
$  cl=barcolor(color); st=barstyle(style);
$  loop 1 to n
$    polygon([0,c[#],c[#+1]],[0,s[#],s[#+1]],1);
$    if lab!=none then
$      rlab=v[#]+r*0.1;
$      {col,row}=toscreen(cos(t[#])*rlab,sin(t[#])*rlab);
$      ctext(""+lab[#],col,row-textheight()/2);
$    endif;
$  end;
$  barcolor(cl); barstyle(st);
$  holding(h);
$  window(w);
$endfunction
% Tidak ada kotak atau sumbu kutu di sini. Selain itu, kami menggunakan
% jendela penuh untuk plot.
% 
% Kita memanggil reset sebelum kami menguji plot ini untuk mengembalikan
% default grafis. Ini tidak
%% perlu, jika Anda yakin plot Anda berhasil.
>reset; starplot1(normal(1,10)+5,color=red,lab=1:10):
 %image% EMT4Plot2D (2)-155.png
% Dalam kondisi tertentu, Anda mungkin ingin merencanakan sesuatu yang
% tidak dapat dilakukan plot2d, tetapi hampir.
% 
% Dalam fungsi berikut, kami melakukan plot impuls logaritmik. plot2d
% dapat melakukan plot logaritmik,
%% tetapi tidak untuk batang impuls.
>function logimpulseplot1 (x,y) ...
$  {x0,y0}=makeimpulse(x,log(y)/log(10));
$  plot2d(x0,y0,>bar,grid=0);
$  h=holding(1);
$  frame();
$  xgrid(ticks(x));
$  p=plot();
$  for i=-10 to 10;
$    if i<=p[4] and i>=p[3] then
$       ygrid(i,yt="10^"+i);
$    endif;
$  end;
$  holding(h);
$endfunction
% Mari kita uji dengan nilai yang terdistribusi secara eksponensial.
>aspect(1.5); x=1:10; y=-log(random(size(x)))*200; ...
>logimpulseplot1(x,y):
 %image% EMT4Plot2D (2)-156.png
% Mari kita menganimasikan kurva 2D menggunakan plot langsung. Perintah
% plot(x,y) hanya memplot
%% kurva ke jendela plot. setplot(a,b,c,d) mengatur jendela ini.
% 
% Fungsi wait(0) memaksa plot untuk muncul di jendela grafik. Jika
% tidak, menggambar ulang terjadi
%% dalam interval waktu yang jarang
>function animliss (n,m) ...
$t=linspace(0,2pi,500);
$f=0;
$c=framecolor(0);
$l=linewidth(2);
$setplot(-1,1,-1,1);
$repeat
$  clg;
$  plot(sin(n*t),cos(m*t+f));
$  wait(0);
$  if testkey() then break; endif;
$  f=f+0.02;
$end;
$framecolor(c);
$linewidth(l);
$endfunction
% Tekan tombol apapun untuk menghentikan animasi ini.
>animliss(2,3); // lihat hasilnya, jika sudah puas, tekan ENTER
% * Logarithmic Plots
% 
% EMT menggunakan parameter ”logplot” untuk skala logaritmik.
%% Plot logaritma dapat diplot baik menggunakan skala logaritma dalam y
% dengan logplot=1, atau menggunakan
%% skala logaritma dalam x dan y dengan logplot=2, atau dalam x dengan
% logplot=3.
% 
%  - logplot=1: y-logarithmic
%%  - logplot=2: x-y-logarithmic
%%  - logplot=3: x-logarithmic
>plot2d("exp(x^3-x)*x^2",1,5,logplot=1):
 %image% EMT4Plot2D (2)-157.png
>plot2d("exp(x+sin(x))",0,100,logplot=1):
 %image% EMT4Plot2D (2)-158.png
>plot2d("exp(x+sin(x))",10,100,logplot=2):
 %image% EMT4Plot2D (2)-159.png
>plot2d("gamma(x)",1,10,logplot=1):
 %image% EMT4Plot2D (2)-160.png
>plot2d("log(x*(2+sin(x/100)))",10,1000,logplot=3):
 %image% EMT4Plot2D (2)-161.png
% Ini juga berfungsi pada plot data ini.
>x=10^(1:20); y=x^2-x;
>plot2d(x,y,logplot=2):
 %image% EMT4Plot2D (2)-162.png
>                
% * Rujukan Lengkap Fungsi plot2d()
% 
%%   function plot2d (xv, yv, btest, a, b, c, d, xmin, xmax, r, n,  ..
%%   logplot, grid, frame, framecolor, square, color, thickness, style, ..
%%   auto, add, user, delta, points, addpoints, pointstyle, bar, histogram,  ..
%%   distribution, even, steps, own, adaptive, hue, level, contour,  ..
%%   nc, filled, fillcolor, outline, title, xl, yl, maps, contourcolor, ..
%%   contourwidth, ticks, margin, clipping, cx, cy, insimg, spectral,  ..
%%   cgrid, vertical, smaller, dl, niveau, levels)
% 
% Multipurpose plot function for plots in the plane (2D plots). This function can do
% plots of functions of one variables, data plots, curves in the plane, bar plots, grids
% of complex numbers, and implicit plots of functions of two variables.
% 
% Parameters
% 
%% x,y       : equations, functions or data vectors
%% a,b,c,d   : Plot area (default a=-2,b=2)
%% r         : if r is set, then a=cx-r, b=cx+r, c=cy-r, d=cy+r
%%             r can be a vector [rx,ry] or a vector [rx1,rx2,ry1,ry2].
%% xmin,xmax : range of the parameter for curves
%% auto      : Determine y-range automatically (default)
%% square    : if true, try to keep square x-y-ranges
%% n         : number of intervals (default is adaptive)
%% grid      : 0 = no grid and labels,
%%             1 = axis only,
%%             2 = normal grid (see below for the number of grid lines)
%%             3 = inside axis
%%             4 = no grid
%%             5 = full grid including margin
%%             6 = ticks at the frame
%%             7 = axis only
%%             8 = axis only, sub-ticks
%% frame     : 0 = no frame
%% framecolor: color of the frame and the grid
%% margin    : number between 0 and 0.4 for the margin around the plot
%% color     : Color of curves. If this is a vector of colors,
%%             it will be used for each row of a matrix of plots. In the case of
%%             point plots, it should be a column vector. If a row vector or a
%%             full matrix of colors is used for point plots, it will be used for
%%             each data point.
%% thickness : line thickness for curves
%%             This value can be smaller than 1 for very thin lines.
%% style     : Plot style for lines, markers, and fills.
%%             For points use
%%             "[]", "<>", ".", "..", "...",
%%             "*", "+", "|", "-", "o"
%%             "[]#", "<>#", "o#" (filled shapes)
%%             "[]w", "<>w", "ow" (non-transparent)
%%             For lines use
%%             "-", "--", "-.", ".", ".-.", "-.-", "->"
%%             For filled polygons or bar plots use
%%             "#", "#O", "O", "/", "\", "\/",
%%             "+", "|", "-", "t"
%% points    : plot single points instead of line segments
%% addpoints : if true, plots line segments and points
%% add       : add the plot to the existing plot
%% user      : enable user interaction for functions
%% delta     : step size for user interaction
%% bar       : bar plot (x are the interval bounds, y the interval values)
%% histogram : plots the frequencies of x in n subintervals
%% distribution=n : plots the distribution of x with n subintervals
%% even      : use inter values for automatic histograms.
%% steps     : plots the function as a step function (steps=1,2)
%% adaptive  : use adaptive plots (n is the minimal number of steps)
%% level     : plot level lines of an implicit function of two variables
%% outline   : draws boundary of level ranges.
% 
%% If the level value is a 2xn matrix, ranges of levels will be drawn
%% in the color using the given fill style. If outline is true, it
%% will be drawn in the contour color. Using this feature, regions of
%% f(x,y) between limits can be marked.
% 
%% hue       : add hue color to the level plot to indicate the function
%%             value
%% contour   : Use level plot with automatic levels
%% nc        : number of automatic level lines
%% title     : plot title (default "")
%% xl, yl    : labels for the x- and y-axis
%% smaller   : if >0, there will be more space to the left for labels.
%% vertical  :
%%   Turns vertical labels on or off. This changes the global variable
%%   verticallabels locally for one plot. The value 1 sets only vertical
%%   text, the value 2 uses vertical numerical labels on the y axis.
%% filled    : fill the plot of a curve
%% fillcolor : fill color for bar and filled curves
%% outline   : boundary for filled polygons
%% logplot   : set logarithmic plots
%%             1 = logplot in y,
%%             2 = logplot in xy,
%%             3 = logplot in x
%% own       :
%%   A string, which points to an own plot routine. With >user, you get
%%   the same user interaction as in plot2d. The range will be set
%%   before each call to your function.
%% maps      : map expressions (0 is faster), functions are always mapped.
%% contourcolor : color of contour lines
%% contourwidth : width of contour lines
%% clipping  : toggles the clipping (default is true)
%% title     :
%%   This can be used to describe the plot. The title will appear above
%%   the plot. Moreover, a label for the x and y axis can be added with
%%   xl="string" or yl="string". Other labels can be added with the
%%   functions label() or labelbox(). The title can be a unicode
%%   string or an image of a Latex formula.
%% cgrid     :
%%   Determines the number of grid lines for plots of complex grids.
%%   Should be a divisor of the the matrix size minus 1 (number of
%%   subintervals). cgrid can be a vector [cx,cy].
% 
% Overview
% 
% The function can plot
% 
% - expressions, call collections or functions of one variable,
%% - parametric curves,
%% - x data against y data,
%% - implicit functions,
%% - bar plots,
%% - complex grids,
%% - polygons.
% 
% If a function or expression for xv is given, plot2d() will compute
%% values in the given range using the function or expression. The
%% expression must be an expression in the variable x. The range must
%% be defined in the parameters a and b unless the default range
%% [-2,2] should be used. The y-range will be computed automatically,
%% unless c and d are specified, or a radius r, which yields the range
%% [-r,r] for x and y. For plots of functions, plot2d will use an
%% adaptive evaluation of the function by default. To speed up the
%% plot for complicated functions, switch this off with <adaptive, and
%% optionally decrease the number of intervals n. Moreover, plot2d()
%% will by default use mapping. I.e., it will compute the plot element
%% for element. If your expression or your functions can handle a
%% vector x, you can switch that off with <maps for faster evaluation.
% 
% Note that adaptive plots are always computed element for element. 
%% If functions or expressions for both xv and for yv are specified,
%% plot2d() will compute a curve with the xv values as x-coordinates
%% and the yv values as y-coordinates. In this case, a range should be
%% defined for the parameter using xmin, xmax. Expressions contained
%% in strings must always be expressions in the parameter variable x.
